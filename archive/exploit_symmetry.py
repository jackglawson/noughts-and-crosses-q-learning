@dataclass(frozen=True)
class PureState:
    board: List[List[str]]

    @classmethod
    def build_from_data(cls, data: GameData):
        # equiv_boards = list(cls.get_equiv_boards(data.board))
        # return cls(sorted(equiv_boards)[0])
        return cls(data.board)

    @staticmethod
    def rotate_board(board):
        """rotate 90 degrees clockwise"""
        new_board = [[" "] * 3 for _ in range(3)]
        new_board[0][0] = board[2][0]
        new_board[0][1] = board[1][0]
        new_board[0][2] = board[0][0]
        new_board[1][0] = board[2][1]
        new_board[1][1] = board[1][1]
        new_board[1][2] = board[0][1]
        new_board[2][0] = board[2][2]
        new_board[2][1] = board[1][2]
        new_board[2][2] = board[0][2]
        return new_board

    @staticmethod
    def flip_board(board):
        """flip horizontally"""
        new_board = [[" "] * 3 for _ in range(3)]
        new_board[0] = board[2]
        new_board[1] = board[1]
        new_board[2] = board[0]
        return new_board

    @classmethod
    def get_equiv_boards(cls, board):
        """Yields boards which are equivalent to the original by symmetry"""
        yield board
        board = cls.rotate_board(board)
        yield board
        board = cls.rotate_board(board)
        yield board
        board = cls.rotate_board(board)
        yield board
        board = cls.flip_board(board)
        yield board
        board = cls.rotate_board(board)
        yield board
        board = cls.rotate_board(board)
        yield board
        board = cls.rotate_board(board)
        yield board

    def display(self):
        display_board(self.board)

    def __repr__(self):
        return str(self.board)

    def __hash__(self):
        return hash(str(self.board))